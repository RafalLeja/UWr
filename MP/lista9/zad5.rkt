#lang plait

(define char-map
  (hash (list
    (pair  (list #\space)       #\space)
    (pair  empty       #\space)
    ;(pair  (list #\. )       #\. )
    (pair (list #\. #\_ #\_ #\_ #\_ ) #\1)
    (pair (list #\. #\. #\_ #\_ #\_ ) #\2)
    (pair (list #\. #\. #\. #\_ #\_ ) #\3)
    (pair (list #\. #\. #\. #\. #\_ ) #\4)
    (pair (list #\. #\. #\. #\. #\. ) #\5)
    (pair (list #\_ #\. #\. #\. #\. ) #\6)
    (pair (list #\_ #\_ #\. #\. #\. ) #\7)
    (pair (list #\_ #\_ #\_ #\. #\. ) #\8)
    (pair (list #\_ #\_ #\_ #\_ #\. ) #\9)
    (pair (list #\_ #\_ #\_ #\_ #\_ ) #\0)
    (pair  (list #\. #\_ )      #\a )
    (pair  (list #\. #\_ )      #\A )
    (pair  (list #\_ #\. #\. #\. )    #\b   )
    (pair  (list #\_ #\. #\. #\. )    #\B   )
    (pair  (list #\_  #\.  #\_  #\. ) #\c      )
    (pair  (list #\_  #\.  #\_  #\. ) #\C      )
    (pair  (list #\_  #\.  #\. )   #\d    )
    (pair  (list #\_  #\.  #\. )   #\D    )
    (pair  (list #\. )       #\e)
    (pair  (list #\. )       #\E)
    (pair  (list #\. #\. #\_ #\. )    #\f   )
    (pair  (list #\. #\. #\_ #\. )    #\F   )
    (pair  (list #\_ #\_ #\. )     #\g  )
    (pair  (list #\_ #\_ #\. )     #\G  )
    (pair  (list #\. #\. #\. #\. )    #\h   )
    (pair  (list #\. #\. #\. #\. )    #\H   )
    (pair  (list #\. #\. )      #\i )
    (pair  (list #\. #\. )      #\I )
    (pair  (list #\. #\_ #\_ #\_ )    #\j   )
    (pair  (list #\. #\_ #\_ #\_ )    #\J   )
    (pair  (list #\_ #\. #\_ )     #\k  )
    (pair  (list #\_ #\. #\_ )     #\K  )
    (pair  (list #\. #\_ #\. #\. )    #\l   )
    (pair  (list #\. #\_ #\. #\. )    #\L   )
    (pair  (list #\_ #\_ )      #\m )
    (pair  (list #\_ #\_ )      #\M )
    (pair  (list #\_ #\. )      #\n )
    (pair  (list #\_ #\. )      #\N )
    (pair  (list #\_ #\_ #\_ )     #\o  )
    (pair  (list #\_ #\_ #\_ )     #\O  )
    (pair  (list #\. #\_ #\_ #\. )    #\p   )
    (pair  (list #\. #\_ #\_ #\. )    #\P   )
    (pair  (list #\_ #\_ #\_ )     #\q  )
    (pair  (list #\_ #\_ #\_ )     #\Q  )
    (pair  (list #\. #\_ #\. )     #\r  )
    (pair  (list #\. #\_ #\. )     #\R  )
    (pair  (list #\. #\. #\. )     #\s  )
    (pair  (list #\. #\. #\. )     #\S  )
    (pair  (list #\_ )       #\t)
    (pair  (list #\_ )       #\T)
    (pair  (list #\. #\. #\_ )     #\u  )
    (pair  (list #\. #\. #\_ )     #\U  )
    (pair  (list #\. #\. #\. #\_ )    #\v   )
    (pair  (list #\. #\. #\. #\_ )    #\V   )
    (pair  (list #\. #\_ #\_ )     #\w  )
    (pair  (list #\. #\_ #\_ )     #\W  )
    (pair  (list #\_ #\. #\. #\_ )    #\x   )
    (pair  (list #\_ #\. #\. #\_ )    #\X   )
    (pair  (list #\_ #\. #\_ #\_ )    #\y   )
    (pair  (list #\_ #\. #\_ #\_ )    #\Y   )
    (pair  (list #\_ #\_ #\. #\. )    #\z   )
    (pair  (list #\_ #\_ #\. #\. )    #\Z   ))))

(define (morse-decode-r s buff)
  (cond 
    [(empty? s) empty]
    [(equal? (first s) #\space) (append (list (some-v (hash-ref char-map buff))) (morse-decode-r (rest s) empty))]
    [else (morse-decode-r (rest s) (append buff (list (first s))))]))

(define (morse-decode s)
  (list->string (morse-decode-r (append (string->list s) (list #\space)) empty)))