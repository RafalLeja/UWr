#if !defined(__movement__)
#define __movement__

#include <iostream>
#include "animals.hpp"

struct Move
{
  explicit inline Move(void) { }

  explicit inline Move(uint32_t const piece,
                       uint32_t const from,
                       uint32_t const to,
                       uint32_t const enemy):
                  piece(piece), from(from), to(to), enemy(enemy) { }


  bool is_capture(void) const;


  bool operator==(Move const &move) const;


  uint32_t piece = 0;
  uint32_t from = 0;
  uint32_t to = 0;
  uint32_t enemy = 0;

};

inline bool Move::is_capture(void) const
{
  return enemy != NONE;
}

inline bool Move::operator==(Move const &move) const
{
  return ((piece == move.piece) & (to == move.to)) == 1;
}

static int const MAX_MOVES = 32;

static uint32_t const STEP_NORTH = 0;
static uint32_t const STEP_EAST  = 1;
static uint32_t const STEP_SOUTH = 2;
static uint32_t const STEP_WEST  = 3;
static uint32_t const LEAP_NORTH = 4;
static uint32_t const LEAP_EAST  = 5;
static uint32_t const LEAP_SOUTH = 6;
static uint32_t const LEAP_WEST  = 7;

static uint32_t const MOVEMENT[16][64] =
{
  {
    6, 14, 14, 14, 14, 14, 12,
    7, 15, 15, 15, 15, 15, 13,
    7, 15, 15, 15, 15, 15, 13,
    7, 15, 15, 15, 15, 15, 13,
    7, 15, 15, 15, 15, 15, 13,
    7, 15, 15, 15, 15, 15, 13,
    7, 15, 15, 15, 15, 15, 13,
    7, 15, 15, 11, 15, 15, 13,
    3, 11,  9,  0,  3, 11,  9,
    0
  }, //
  {
    6, 14, 12,  0,  6, 14, 12,
    7, 15, 15, 14, 15, 15, 13,
    7, 15, 15, 15, 15, 15, 13,
    7, 15, 15, 15, 15, 15, 13,
    7, 15, 15, 15, 15, 15, 13,
    7, 15, 15, 15, 15, 15, 13,
    7, 15, 15, 15, 15, 15, 13,
    7, 15, 15, 15, 15, 15, 13,
    3, 11, 11, 11, 11, 11,  9,
    0
  }, 
  {
    6, 14, 14, 14, 14, 14, 12,
    7, 15, 15, 15, 15, 15, 13,
    7, 11, 11, 15, 11, 11, 13,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    7, 14, 14, 15, 14, 14, 13,
    7, 15, 15, 11, 15, 15, 13,
    3, 11,  9,  0,  3, 11,  9,
    0
  }, 
  {
    6, 14, 12,  0,  6, 14, 12,
    7, 15, 15, 14, 15, 15, 13,
    7, 11, 11, 15, 11, 11, 13,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    7, 14, 14, 15, 14, 14, 13,
    7, 15, 15, 15, 15, 15, 13,
    3, 11, 11, 11, 11, 11,  9,
    0
  }, 
  {
    6, 14, 14, 14, 14, 14, 12,
    7, 15, 15, 15, 15, 15, 13,
    7, 11, 11, 15, 11, 11, 13,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    7, 14, 14, 15, 14, 14, 13,
    7, 15, 15, 11, 15, 15, 13,
    3, 11,  9,  0,  3, 11,  9,
    0
  }, 
  {
    6, 14, 12,  0,  6, 14, 12,
    7, 15, 15, 14, 15, 15, 13,
    7, 11, 11, 15, 11, 11, 13,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    7, 14, 14, 15, 14, 14, 13,
    7, 15, 15, 15, 15, 15, 13,
    3, 11, 11, 11, 11, 11,  9,
    0
  }, 
  {
    6, 14, 14, 14, 14, 14, 12,
    7, 15, 15, 15, 15, 15, 13,
    7, 11, 11, 15, 11, 11, 13,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    7, 14, 14, 15, 14, 14, 13,
    7, 15, 15, 11, 15, 15, 13,
    3, 11,  9,  0,  3, 11,  9,
    0
  }, 
  {
    6, 14, 12,  0,  6, 14, 12,
    7, 15, 15, 14, 15, 15, 13,
    7, 11, 11, 15, 11, 11, 13,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    7, 14, 14, 15, 14, 14, 13,
    7, 15, 15, 15, 15, 15, 13,
    3, 11, 11, 11, 11, 11,  9,
    0
  }, 
  {
    6, 14, 14, 14, 14, 14, 12,
    7, 15, 15, 15, 15, 15, 13,
    7, 11, 11, 15, 11, 11, 13,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    7, 14, 14, 15, 14, 14, 13,
    7, 15, 15, 11, 15, 15, 13,
    3, 11,  9,  0,  3, 11,  9,
    0
  }, 
  {
    6, 14, 12,  0,  6, 14, 12,
    7, 15, 15, 14, 15, 15, 13,
    7, 11, 11, 15, 11, 11, 13,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    7, 14, 14, 15, 14, 14, 13,
    7, 15, 15, 15, 15, 15, 13,
    3, 11, 11, 11, 11, 11,  9,
    0
  }, 
  {
     6, 14, 14,  14, 14, 14,  12,
     7, 15, 15,  15, 15, 15,  13,
     7, 75, 75,  15, 75, 75,  13,
    37,  0,  0, 165,  0,  0, 133,
    37,  0,  0, 165,  0,  0, 133,
    37,  0,  0, 165,  0,  0, 133,
     7, 30, 30,  15, 30, 30,  13,
     7, 15, 15,  11, 15, 15,  13,
     3, 11,  9,   0,  3, 11,   9,
     0
  }, 
  {
     6, 14, 12,   0,  6, 14,  12,
     7, 15, 15,  14, 15, 15,  13,
     7, 75, 75,  15, 75, 75,  13,
    37,  0,  0, 165,  0,  0, 133,
    37,  0,  0, 165,  0,  0, 133,
    37,  0,  0, 165,  0,  0, 133,
     7, 30, 30,  15, 30, 30,  13,
     7, 15, 15,  15, 15, 15,  13,
     3, 11, 11,  11, 11, 11,   9,
     0
  }, 
  {
     6, 14, 14,  14, 14, 14,  12,
     7, 15, 15,  15, 15, 15,  13,
     7, 75, 75,  15, 75, 75,  13,
    37,  0,  0, 165,  0,  0, 133,
    37,  0,  0, 165,  0,  0, 133,
    37,  0,  0, 165,  0,  0, 133,
     7, 30, 30,  15, 30, 30,  13,
     7, 15, 15,  11, 15, 15,  13,
     3, 11,  9,   0,  3, 11,   9,
     0
  }, 
  {
     6, 14, 12,   0,  6, 14,  12,
     7, 15, 15,  14, 15, 15,  13,
     7, 75, 75,  15, 75, 75,  13,
    37,  0,  0, 165,  0,  0, 133,
    37,  0,  0, 165,  0,  0, 133,
    37,  0,  0, 165,  0,  0, 133,
     7, 30, 30,  15, 30, 30,  13,
     7, 15, 15,  15, 15, 15,  13,
     3, 11, 11,  11, 11, 11,   9,
     0
  }, 
  {
    6, 14, 14, 14, 14, 14, 12,
    7, 15, 15, 15, 15, 15, 13,
    7, 11, 11, 15, 11, 11, 13,
    5,  0,  0,  5, 0,   0,  5,
    5,  0,  0,  5, 0,   0,  5,
    5,  0,  0,  5, 0,   0,  5,
    7, 14, 14, 15, 14, 14, 13,
    7, 15, 15, 11, 15, 15, 13,
    3, 11,  9,  0,  3, 11,  9,
    0
  }, 
  {
    6, 14, 12,  0,  6, 14, 12,
    7, 15, 15, 14, 15, 15, 13,
    7, 11, 11, 15, 11, 11, 13,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    5,  0,  0,  5,  0,  0,  5,
    7, 14, 14, 15, 14, 14, 13,
    7, 15, 15, 15, 15, 15, 13,
    3, 11, 11, 11, 11, 11,  9,
    0
  } 
}; 

static uint32_t const MOVEMENT_MASK[8] =
{
    1, // STEP_NORTH
    2, // STEP_EAST
    4, // STEP_SOUTH
    8, // STEP_WEST
   16, // LEAP_NORTH
   32, // LEAP_EAST
   64, // LEAP_SOUTH
  128  // LEAP_WEST
}; // MOVEMENT_MASK

static int const MOVEMENT_OFFSET[8] =
{
   -7, // STEP_NORTH
    1, // STEP_EAST
    7, // STEP_SOUTH
   -1, // STEP_WEST
  -28, // LEAP_NORTH
    3, // LEAP_EAST
   28, // LEAP_SOUTH
   -3  // LEAP_WEST
}; // MOVEMENT_OFFSET

static inline bool can_move(uint32_t const piece,
                            uint32_t const from,
                            uint32_t const direction,
                            uint32_t      &to)
{
  to = (from + MOVEMENT_OFFSET[direction]) & 63;
  return (MOVEMENT[piece][from] & MOVEMENT_MASK[direction]) > 0;
}

#endif